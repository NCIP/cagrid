<link type="text/css" rel="stylesheet"
      href="<c:url value="/js/yui/assets/skins/sam/datatable.css"/>"/>
<link type="text/css" rel="stylesheet" href="<c:url value="/js/yui/treeview/assets/css/menu/tree.css"/>"/>
<link rel="stylesheet" type="text/css" href="<c:url value="/js/yui/paginator/assets/skins/sam/paginator.css"/>"/>

<script type="text/javascript" src="<c:url value="/js/scriptaculous/prototype.js"/>"></script>

<script type="text/javascript" src="<c:url value="/js/yui/yahoo-dom-event/yahoo-dom-event.js"/>"></script>
<script type="text/javascript" src="<c:url value="/js/yui/element/element-min.js"/>"></script>
<script type="text/javascript" src="<c:url value="/js/yui/datasource/datasource-min.js"/>"></script>
<script type="text/javascript" src="<c:url value="/js/yui/json/json-min.js"/>"></script>
<script type="text/javascript" src="<c:url value="/js/yui/connection/connection-min.js"/>"></script>
<script type="text/javascript" src="<c:url value="/js/yui/get/get-min.js"/>"></script>
<script type="text/javascript" src="<c:url value="/js/yui/logger/logger-min.js"/>"></script>
<script src="<c:url value="/js/yui/treeview/treeview-min.js"/>"></script>
<script type="text/javascript" src="<c:url value="/js/yui/paginator/paginator-min.js"/>"></script>
<c:set var="ns"><portlet:namespace/></c:set>


<div id="myLogger"><%--logging--%></div>

<script src="<c:url value="/js/browse-catalog.js"/>"></script>

<script type="text/javascript">
    var myLogReader = new YAHOO.widget.LogReader("myLogger");
    var solrDatasource = new YAHOO.util.XHRDataSource("<c:out value="${solrServiceUrl}"/>/select?", {responseType:YAHOO.util.XHRDataSource.JSON});


    <%--Represents the summary tree for filtering search results--%>
    var SummaryTree = Class.create({
        initialize: function(catalog) {
            var summaryQuery = catalog.query;
            var treeDiv = catalog.config.treeDiv;

            this.tree = new YAHOO.widget.TreeView(document.getElementById(treeDiv));

        <%--onClick callback--%>
            this.tree.subscribe("labelClick", function(node) {
                catalog.config.filterType = node.data.type;
                catalog.config.filterValue = node.data.name;
                catalog.runQuery(false);
                node.toggle();
            });

            treeEvent.subscribe(updateTreeWithResults, this);

            var searchCallback = function (oRequest, oParsedResponse, oPayload) {
                var solrJSON = YAHOO.lang.JSON.parse(oParsedResponse.results.responseText);
                YAHOO.log("Firing tree event");
                treeEvent.fire(solrJSON.tree);

            };

        <%--only get catalog_type field for makign summary tree--%>
            YAHOO.log("Summary query is " + summaryQuery.getQuery());

            summaryQuery.setRows(10000);
            solrDatasource.sendRequest(summaryQuery.getQuery(), {
                success : searchCallback,
                failure : searchCallback,
                scope : this
            });
            summaryQuery.setRows(catalog.config.rowsPerPage);

            this.rootNode = new YAHOO.widget.HTMLNode({html:"Search Categories"}, this.tree.getRoot(), true);
            this.tree.render();
        },
        addSubTree: function(subTree) {
            var nodesList = subTree.nodes;
            if (subTree.nodes.length > 0) {
                var subTreeNode = new YAHOO.widget.TextNode({label:subTree.label + " (All)",type:subTree.type,name:"[* TO *]"}, this.rootNode, true);
                for (var i = 0; i < nodesList.length; i++) {
                    var node = nodesList[i];
                    new YAHOO.widget.MenuNode({label:node.label + "(" + node.count + ")",type:subTree.type,name:node.name}, subTreeNode, true);
                }
            }
        },
        refresh: function() {
            this.tree.getRoot().refresh();
        }
    });

    function updateTreeWithResults(type, args, tree) {
        var treeList = args[0];
        for (var i = 0, len = treeList.length; i < len; i++) {
            tree.addSubTree(treeList[i]);
        }
        tree.refresh();
    }

    <%--represents the catalog search/browse results object--%>
    var Catalogs = Class.create({

        initialize: function(config) {
            this.rowsPerPage = 10;
            this.config = {keyword:config.keyword,treeDiv:config.treeDiv,catalogType:config.catalogType,rowsPerPage:config.rowsPerPage,paginatorDiv:config.paginatorDiv,
                filterType:config.filterType,filterValue:config.filterValue,sortField:config.sortField};

            if (this.config.rowsPerPage)
                this.rowsPerPage = this.config.rowsPerPage;

            this.paginator = new YAHOO.widget.Paginator({
                rowsPerPage  : this.rowsPerPage,
                alwaysVisible: false,
                containers   : [this.config.paginatorDiv]
            });

            this.paginator.subscribe('changeRequest', this.handlePagination, this);
            this.query = new solrQuery(this.config.keyword, this.rowsPerPage);
            sortEvent.subscribe(this.sort, this);

            if (this.config.catalogType) {
                this.query.addFacet("catalog_type", this.config.catalogType);
            }
            new SummaryTree(this);


            this.runQuery(false);

        },

        sort: function(type, args, catalog) {
            var sort = args[0];
            catalog.config.sortField = sort.value;
            catalog.runQuery(false);
        },

        runQuery: function(paginate) {

            this.query.removeAllFacets();

            if (this.config.catalogType) {
                YAHOO.log("Adding catalog_type facet");
                this.query.addFacet("catalog_type", this.config.catalogType);
            }
            if (this.config.filterType) {
                 YAHOO.log("Adding " + this.config.filterType + " facet");
                this.query.addFacet(this.config.filterType, this.config.filterValue);
            }
            if (this.config.sortField) {
                YAHOO.log("Will sort on " + this.config.sortField);
                this.query.sort(this.config.sortField + "+asc");
            }

            if (!paginate) {
            <%--not coming for paginator--%>
                this.query.setStartValue(0);
            }
            YAHOO.log("Will run a new query" + this.query.getQuery());
            
            var searchCallback = function (oRequest, oParsedResponse, oPayload) {
                try {
                    var solrJSON = YAHOO.lang.JSON.parse(oParsedResponse.results.responseText);
                    var resultList = solrJSON.response.docs;
                    this.setupPaginator({start:solrJSON.response.start, count:solrJSON.response.numFound});

                    YAHOO.log("Firing result event");
                    resultEvent.fire(resultList);

                }
                catch (x) {
                    alert("JSON Parse failed!" + x);
                    return;
                }
            };

            var failureCallback = function (o) {
                alert("Async call failed!");
                if (!YAHOO.util.Connect.isCallInProgress(o)) {
                    alert("Async call failed!");
                }
            };

            solrDatasource.sendRequest(this.query.getQuery(), {success : searchCallback,
                failure : failureCallback,
                scope : this});
        },

        setupPaginator: function(result) {
            this.paginator.setState({totalRecords:result.count,recordOffset:result.start});
            this.paginator.render();
            var startValue = result.start+1;
            var totalRecords = result.count;
            var endValue = result.start +  this.rowsPerPage;
            if(endValue>totalRecords)
                endValue = totalRecords;

            $("${ns}paginatorSummary").innerHTML = "Results  <strong>" + startValue + " - " + endValue + "</strong> of  <strong>" + totalRecords + "</strong>";
            
        },

        handlePagination: function(newState, cat) {
            cat.paginator.setState(newState);
            cat.query.setStartValue(newState.recordOffset);
            cat.runQuery(true);
        }
    });


</script>

