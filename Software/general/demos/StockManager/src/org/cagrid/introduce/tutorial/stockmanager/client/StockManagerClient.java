package org.cagrid.introduce.tutorial.stockmanager.client;

import gov.nih.nci.cagrid.common.Utils;

import java.io.BufferedInputStream;
import java.io.ByteArrayInputStream;
import java.io.FileOutputStream;
import java.io.InputStream;
import java.io.StringReader;
import java.io.StringWriter;
import java.rmi.RemoteException;
import java.util.ArrayList;
import java.util.List;

import javax.xml.namespace.QName;

import org.apache.axis.client.Stub;
import org.apache.axis.message.MessageElement;
import org.apache.axis.message.addressing.EndpointReferenceType;
import org.apache.axis.types.URI.MalformedURIException;
import org.cagrid.introduce.tutorial.stockmanager.common.StockManagerI;
import org.cagrid.introduce.tutorial.stockmanager.portfolio.client.StockPortfolioManagerClient;
import org.cagrid.introduce.tutorial.tools.beans.Portfolio;
import org.cagrid.introduce.tutorial.tools.beans.Symbols;
import org.cagrid.transfer.context.client.TransferServiceContextClient;
import org.cagrid.transfer.context.client.helper.TransferClientHelper;
import org.cagrid.transfer.context.stubs.types.TransferServiceContextReference;
import org.cagrid.transfer.descriptor.Status;
import org.globus.gsi.GlobusCredential;
import org.globus.wsrf.NotifyCallback;
import org.globus.wsrf.utils.XmlUtils;

/**
 * This class is autogenerated, DO NOT EDIT GENERATED GRID SERVICE ACCESS METHODS.
 *
 * This client is generated automatically by Introduce to provide a clean unwrapped API to the
 * service.
 *
 * On construction the class instance will contact the remote service and retrieve it's security
 * metadata description which it will use to configure the Stub specifically for each method call.
 * 
 * @created by Introduce Toolkit version 1.3
 */
public class StockManagerClient extends StockManagerClientBase implements StockManagerI {	

	public StockManagerClient(String url) throws MalformedURIException, RemoteException {
		this(url,null);	
	}

	public StockManagerClient(String url, GlobusCredential proxy) throws MalformedURIException, RemoteException {
	   	super(url,proxy);
	}
	
	public StockManagerClient(EndpointReferenceType epr) throws MalformedURIException, RemoteException {
	   	this(epr,null);
	}
	
	public StockManagerClient(EndpointReferenceType epr, GlobusCredential proxy) throws MalformedURIException, RemoteException {
	   	super(epr,proxy);
	}

	public static void usage(){
		System.out.println(StockManagerClient.class.getName() + " -url <service url>");
	}
	
	public static void main(String [] args){
	    System.out.println("Running the Grid Service Client");
		try{
		if(!(args.length < 2)){
			if(args[0].equals("-url")){
			  StockManagerClient client = new StockManagerClient(args[1]);
			  // place client calls here if you want to use this main as a
			  // test....
			  System.out.println("Get Stock Quote...");
			  org.cagrid.introduce.tutorial.tools.beans.Quote quote = client.getQuote("GME");
				System.out.println(org.cagrid.introduce.tutorial.tools.QuoteTools.Quote2String(quote));
				
				System.out.println("--------------------------------------");
				System.out.println("Get Stock Chart...");
				
				//retrieve a transfer context reference to a Gamestop chart
				TransferServiceContextReference ref = client.getChart("GME");
				
				//create a transfer context client for the reference
				TransferServiceContextClient tclient = new TransferServiceContextClient(ref.getEndpointReference());
				//use the TransferClientHelper to create an inputstream that I can use to transfer the data in the context to my computer
				InputStream stream = TransferClientHelper.getData(tclient.getDataTransferDescriptor());
				//read the InputStream into a buffer and save it to disk
				BufferedInputStream bis = new BufferedInputStream(stream);
				//save the data from the transfer context locally
				byte[] buf = new byte[1024];
				String filename = "gmechart.png";
				FileOutputStream fos = new FileOutputStream(filename);
				System.out.println("Saved GME chart in file " + filename);
				
				int bytes = 0;
				while ((bytes = bis.read(buf)) != -1) {
					fos.write(buf, 0, bytes);
				}
				fos.close();

				// create a new portfolio and add some stocks
				System.out.println("--------------------------------------");
				System.out.println("Creating Portfolio 1");
				org.cagrid.introduce.tutorial.stockmanager.portfolio.client.StockPortfolioManagerClient portfolio1 = client
					.createPortfolio("Portfolio 1");
				
				// subscribe to changes in the portfolio
				System.out.println("Subscribing to the portfolio");
				portfolio1.subscribe(
						org.cagrid.introduce.tutorial.stockmanager.portfolio.common.StockPortfolioManagerConstants.PORTFOLIO,
						new NotifyCallback() {
							public void deliver(List topicPath, EndpointReferenceType producer, Object message) {
								System.out.println("TESTING");
								org.oasis.wsrf.properties.ResourcePropertyValueChangeNotificationType changeMessage = ((org.globus.wsrf.core.notification.ResourcePropertyValueChangeNotificationElementType) message)
										.getResourcePropertyValueChangeNotification();

								System.out.println("GOT NOTIFICATION: ");
								try {
									MessageElement messageElement = changeMessage.getNewValue().get_any()[0];
									StringReader reader = new StringReader(XmlUtils.toString(messageElement));
									Portfolio portfolio = (Portfolio) Utils.deserializeObject(reader, Portfolio.class);
									System.out.println(org.cagrid.introduce.tutorial.tools.QuoteTools
											.Portfolio2String(portfolio));
								} catch (Exception e1) {
									e1.printStackTrace();
								}
							}
						});
				
				//add a stock to the portfolio
				System.out.println("Adding stock to portfolio 1");
				portfolio1.addStock("GE");
				
				//sleep and wait on notification
				Thread.sleep(5000);
				System.out.println("TESTING5");
				
				
				// Upload additional Symbols via Transfer
				System.out.println("--------------------------------------");
				System.out.println("Uploading additional stock symbols to be added to portfolio 1 via Transfer");
				
				org.cagrid.introduce.tutorial.stockmanager.portfolio.client.StockPortfolioManagerClient portfolio3 = client
					.createPortfolio("Portfolio 3");
			
				
				StockPortfolioManagerClient stockPortfolioMgrClient = new StockPortfolioManagerClient(portfolio3.getEndpointReference());
				TransferServiceContextReference uploadTransferRef = stockPortfolioMgrClient.addPortfolioSymbols();
				TransferServiceContextClient uploadClient = new TransferServiceContextClient (uploadTransferRef.getEndpointReference());
				
				// create Symbol object containing additional stock symbols to add 
				List<String> symbolList = new ArrayList<String>();
				symbolList.add("APPL");
				symbolList.add("BLDP");
				symbolList.add("MCD");
				symbolList.add("JPM");
				String[] symbolArray = new String[symbolList.size()];
				symbolList.toArray(symbolArray);
				Symbols symbols = new Symbols(symbolArray);

				// serialize the object
				StringWriter sw = new StringWriter();
		        Utils.serializeObject(symbols, new QName("Symbols"), sw);
		        
		        // upload the data
		        InputStream is = new ByteArrayInputStream(sw.toString().getBytes());
		        uploadClient.putData(is, sw.toString().length());
				
				// tell the resource that the data has been uploaded.
				uploadClient.setStatus(Status.Staged);
				
				// Sleep to allow for update, then print the portfolio
				Thread.sleep(5000);
				System.out.println("Getting Quotes");
				System.out.println(org.cagrid.introduce.tutorial.tools.QuoteTools.PortfolioInstance2String(portfolio3.getPortfolioQuote()));
				
				// now use the destroy method to remove the portfolio
				System.out.println("Destroying Portfolio 3");
				portfolio3.destroy();

			} else {
				usage();
				System.exit(1);
			}
		} else {
			usage();
			System.exit(1);
		}
		} catch (Exception e) {
			e.printStackTrace();
			System.exit(1);
		}
	}
	
	public void deliver(List topicPath, EndpointReferenceType producer, Object message) {
	System.out.println("TESTING");
	org.oasis.wsrf.properties.ResourcePropertyValueChangeNotificationType changeMessage = ((org.globus.wsrf.core.notification.ResourcePropertyValueChangeNotificationElementType) message)
		.getResourcePropertyValueChangeNotification();

	if (changeMessage != null) {
		try {
			System.out.println("GOT NOTIFICATION: " + changeMessage.getNewValue().get_any()[0].getAsString());
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}
}

  public org.oasis.wsrf.properties.GetMultipleResourcePropertiesResponse getMultipleResourceProperties(org.oasis.wsrf.properties.GetMultipleResourceProperties_Element params) throws RemoteException {
    synchronized(portTypeMutex){
      configureStubSecurity((Stub)portType,"getMultipleResourceProperties");
    return portType.getMultipleResourceProperties(params);
    }
  }

  public org.oasis.wsrf.properties.GetResourcePropertyResponse getResourceProperty(javax.xml.namespace.QName params) throws RemoteException {
    synchronized(portTypeMutex){
      configureStubSecurity((Stub)portType,"getResourceProperty");
    return portType.getResourceProperty(params);
    }
  }

  public org.oasis.wsrf.properties.QueryResourcePropertiesResponse queryResourceProperties(org.oasis.wsrf.properties.QueryResourceProperties_Element params) throws RemoteException {
    synchronized(portTypeMutex){
      configureStubSecurity((Stub)portType,"queryResourceProperties");
    return portType.queryResourceProperties(params);
    }
  }

  public org.cagrid.introduce.tutorial.tools.beans.Quote getQuote(java.lang.String symbol) throws RemoteException {
    synchronized(portTypeMutex){
      configureStubSecurity((Stub)portType,"getQuote");
    org.cagrid.introduce.tutorial.stockmanager.stubs.GetQuoteRequest params = new org.cagrid.introduce.tutorial.stockmanager.stubs.GetQuoteRequest();
    org.cagrid.introduce.tutorial.stockmanager.stubs.GetQuoteRequestSymbol symbolContainer = new org.cagrid.introduce.tutorial.stockmanager.stubs.GetQuoteRequestSymbol();
    symbolContainer.setSymbol(symbol);
    params.setSymbol(symbolContainer);
    org.cagrid.introduce.tutorial.stockmanager.stubs.GetQuoteResponse boxedResult = portType.getQuote(params);
    return boxedResult.getQuote();
    }
  }

  public org.cagrid.transfer.context.stubs.types.TransferServiceContextReference getChart(java.lang.String symbol) throws RemoteException {
    synchronized(portTypeMutex){
      configureStubSecurity((Stub)portType,"getChart");
    org.cagrid.introduce.tutorial.stockmanager.stubs.GetChartRequest params = new org.cagrid.introduce.tutorial.stockmanager.stubs.GetChartRequest();
    org.cagrid.introduce.tutorial.stockmanager.stubs.GetChartRequestSymbol symbolContainer = new org.cagrid.introduce.tutorial.stockmanager.stubs.GetChartRequestSymbol();
    symbolContainer.setSymbol(symbol);
    params.setSymbol(symbolContainer);
    org.cagrid.introduce.tutorial.stockmanager.stubs.GetChartResponse boxedResult = portType.getChart(params);
    return boxedResult.getTransferServiceContextReference();
    }
  }

  public org.cagrid.introduce.tutorial.stockmanager.portfolio.client.StockPortfolioManagerClient createPortfolio(java.lang.String portfolioName) throws RemoteException, org.apache.axis.types.URI.MalformedURIException {
    synchronized(portTypeMutex){
      configureStubSecurity((Stub)portType,"createPortfolio");
    org.cagrid.introduce.tutorial.stockmanager.stubs.CreatePortfolioRequest params = new org.cagrid.introduce.tutorial.stockmanager.stubs.CreatePortfolioRequest();
    params.setPortfolioName(portfolioName);
    org.cagrid.introduce.tutorial.stockmanager.stubs.CreatePortfolioResponse boxedResult = portType.createPortfolio(params);
    EndpointReferenceType ref = boxedResult.getStockPortfolioManagerReference().getEndpointReference();
    return new org.cagrid.introduce.tutorial.stockmanager.portfolio.client.StockPortfolioManagerClient(ref,getProxy());
    }
  }

}
