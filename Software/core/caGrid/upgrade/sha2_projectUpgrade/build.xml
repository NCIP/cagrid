<?xml version="1.0"?>
<!-- ================================================================= -->
<!-- Ant script for upgrading caGrid 1.2-1.4 projects to use SHA2      -->
<!-- ================================================================= -->
<project name="caGrid-sha2-upgrade" basedir="." default="upgradeHelp" xmlns:ivy="antlib:org.apache.ivy.ant">
    <!-- ======================== -->
    <!-- Require Java 1.5 or 1.6  -->
    <!-- ======================== -->
    <condition property="isJDK1.5or1.6" value="true">
        <or>
            <equals arg1="${ant.java.version}" arg2="1.5" />
            <equals arg1="${ant.java.version}" arg2="1.6" />
        </or>
    </condition>
    <fail message="JDK 1.5 (or 1.6) is currently required to build this project!" unless="isJDK1.5or1.6" />

    <!-- ================= -->
    <!-- Require ant 1.7.0 -->
    <!-- ================= -->
    <condition property="ant-is-exact-7">
        <antversion exactly="1.7.0"/>
    </condition>
    <fail message="Ant version 1.7.0 (exactly) is required" unless="ant-is-exact-7" />

    <fail unless="project.dir">The ant property project.dir is not defined. It must have a value that is the path of the root directory of a project. This can be set from the command line by passing ant this switch: -Dproject.dir=projectDirectory</fail>

    <property name="target.version" value="1.4.1" />

    <property name="build-deploy.new" location="build-deploy.xml.new" />
    <property name="build-deploy.old" location="build-deploy.xml.old" />
	<property name="build-deploy.1_2" location="build-deploy.xml.1.2"/>

    <macrodef name="project-file">
    	<attribute name="name"/>
    	<attribute name="type" default="file" />
    	<sequential>
    		<property name="pd.@{name}" location="${project.dir}/@{name}" />
    		<condition property="unavail.@{name}" value="" else="@{name}${line.separator}" >
  			    <available file="${project.dir}/@{name}" type="@{type}" />
   			</condition>
    	</sequential>
    </macrodef>
    <project-file name="build-deploy.xml" />
    <project-file name="build.xml" />
    <project-file name="deploy.properties" />
    <project-file name="etc" type="dir" />
    <project-file name="ext" type="dir" />
    <project-file name="introduce.properties" />
    <project-file name="introduce.xml" />
    <project-file name="ivy.xml" />
    <project-file name="jndi-config.xml" />
    <project-file name="project.properties" />
    <project-file name="schema" type="dir" />
    <project-file name="server-config.wsdd" />
    <project-file name="service.properties" />
    <project-file name="src" type="dir" />
    <project-file name="tools" type="dir" />

    <target name="upgradeHelp" description="Prints description of how to use this script" >
        <echo>To upgrade an introduce-created project from an older version of caGrid to version ${target.version}, invoke this script like this:</echo>
        <echo>    ant ${ant.file} -Dproject.dir=projectDirectory toSha2</echo>
    </target>

    <target name="_init" >
        <echo>Upgrading project in ${project.dir} to caGrid version ${target.version} using ant script in ${ant.file}</echo>
        <tstamp/>
    </target>

    <target name="_verifyProjectDirectory" >
        <condition property="isIntroduceGenerated" >
            <and>
            	<length string="${unavail.build-deploy.xml}" trim="true" length="0" />
            	<length string="${unavail.build.xml}" trim="true" length="0" />
            	<length string="${unavail.deploy.properties}" trim="true" length="0" />
            	<length string="${unavail.etc}" trim="true" length="0" />
            	<length string="${unavail.ext}" trim="true" length="0" />
            	<length string="${unavail.introduce.properties}" trim="true" length="0" />
                <length string="${unavail.introduce.xml}" trim="true" length="0" />
                <length string="${unavail.ivy.xml}" trim="true" length="0" />
                <length string="${unavail.jndi-config.xml}" trim="true" length="0" />
                <length string="${unavail.project.properties}" trim="true" length="0" />
                <length string="${unavail.schema}" trim="true" length="0" />
                <length string="${unavail.server-config.wsdd}" trim="true" length="0" />
                <length string="${unavail.service.properties}" trim="true" length="0" />
                <length string="${unavail.src}" trim="true" length="0" />
                <length string="${unavail.tools}" trim="true" length="0" />
            </and>
        </condition>
        <fail unless="isIntroduceGenerated">
        The directory ${project.dir} does not contain everything that an introduce-created project directory is expected to create. One of the following is missing:
${unavail.build-deploy.xml}${unavail.build.xml}${unavail.deploy.properties}${unavail.etc}${unavail.ext}${unavail.introduce.properties}${unavail.introduce.xml}${unavail.ivy.xml}${unavail.jndi-config.xml}{unavail.project.properties}${unavail.schema}${unavail.server-config.wsdd}${unavail.service.properties}${unavail.src}${unavail.tools}
        </fail>
    </target>

    <target name="_checkFiles">
    	<!-- To be compete, first check that our own files are present -->
        <condition property="build-deploy.new.exists" >
            <available file="${build-deploy.new}" />
        </condition>
        <fail unless="build-deploy.new.exists">Unable to read file ${build-deploy.new}, which should be in the same directory as this ant script.</fail>
        <condition property="build-deploy.old.exists" >
            <available file="${build-deploy.old}" />
        </condition>
        <fail unless="build-deploy.old.exists">Unable to read file ${build-deploy.old}, which should be in the same directory as this ant script.</fail>
        <condition property="build-deploy.1_2.exists" >
            <available file="${build-deploy.1_2}" />
        </condition>
        <fail unless="build-deploy.old.exists">Unable to read file ${build-deploy.old}, which should be in the same directory as this ant script.</fail>

    	<!-- Condition is true if the build-deploy.xml file matches caGrid 1.3 or 1.4 -->
        <condition property="build-deploy.isOld">
            <filesmatch file1="${build-deploy.old}" file2="${pd.build-deploy.xml}" textfile="true" />
        </condition>

    	<!-- Condition is true if the build-deploy.xml file matches the sha2 release of caGrid -->
        <condition property="build-deploy.isNew">
            <filesmatch file1="${build-deploy.new}" file2="${pd.build-deploy.xml}" textfile="true" />
        </condition>

    	<!-- Condition is true if the build-deploy.xml file matches caGrid 1.2 -->
        <condition property="build-deploy.is1_2">
            <filesmatch file1="${build-deploy.1_2}" file2="${pd.build-deploy.xml}" textfile="true" />
        </condition>

    	<!-- If the build-deploy.xml file does not match any of the released versions of the file then assume it has been edited. -->
        <condition property="build-deploy.isEdited">
            <and>
                <not>
                    <isset property="build-deploy.isOld" />
                </not>
                <not>
                    <isset property="build-deploy.isNew" />
                </not>  
                <not>
                    <isset property="build-deploy.is1_2" />
                </not>  
            </and>
        </condition>
        <fail if="build-deploy.isEdited">The file ${pd.build-deploy.xml} has been edited. Automated migration with an edited version of this file is not supported.</fail>
    </target>

    <target name="_replaceBuildDeployXml" unless="build-deploy.isNew">
        <echo>The content of file ${pd.build-deploy.xml} matches older versions of caGrid.  Replacing with new version of file.</echo>
        <move file="${pd.build-deploy.xml}" tofile="${project.dir}/build-deploy.xml.original"
              preservelastmodified="true" verbose="true" />
        <copy file="${build-deploy.new}" tofile="${pd.build-deploy.xml}" verbose="true" />
    </target>

    <target name="_okBuildDeployXml" if="build-deploy.isNew" >
        <echo>The content of file ${pd.build-deploy.xml} matches the new version of caGrid.</echo>
    </target>

    <target name="_updateBuildDeployXml" depends="_checkFiles,_replaceBuildDeployXml,_okBuildDeployXml" >
    </target>

    <target name="_updateFiles" depends="_checkFiles,_updateBuildDeployXml" />

    <target name="toSha2" description="Convert a project created by introduce from an older version of caGrid.  The root directory of the project must be specified as the value of the ant attribute project.dir.  You can invoke it using a command line like this: ant -Dproject.dir=projectDirectory toSha2"
            depends="_verifyProjectDirectory,_init,_checkFiles,_updateFiles" >
    </target>
</project>