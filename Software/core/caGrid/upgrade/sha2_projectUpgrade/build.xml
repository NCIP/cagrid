<?xml version="1.0"?>
<!-- ================================================================= -->
<!-- Ant script for upgrading caGrid 1.2-1.4 projects to use SHA2      -->
<!-- ================================================================= -->
<!-- Run ths script with no target for documentation                   -->
<!-- ================================================================= -->
<project name="caGrid-sha2-upgrade" basedir="." default="upgradeHelp" xmlns:ivy="antlib:org.apache.ivy.ant">
	<!-- ======================== -->
	<!-- Require Java 1.5 or 1.6  -->
	<!-- ======================== -->
	<condition property="isJDK1.5or1.6" value="true">
		<or>
			<equals arg1="${ant.java.version}" arg2="1.5" />
			<equals arg1="${ant.java.version}" arg2="1.6" />
		</or>
	</condition>
	<fail message="JDK 1.5 (or 1.6) is currently required to build this project!" unless="isJDK1.5or1.6" />

	<!-- ================= -->
	<!-- Require ant 1.7.0 -->
	<!-- ================= -->
	<condition property="ant-is-exact-7">
		<antversion exactly="1.7.0" />
	</condition>
	<fail message="Ant version 1.7.0 (exactly) is required" unless="ant-is-exact-7" />

	<property name="target.version" value="1.4.1" />

	<property name="build-deploy.new" location="build-deploy.xml.new" />
	<property name="build-deploy.old" location="build-deploy.xml.old" />
	<property name="build-deploy.1_2" location="build-deploy.xml.1.2" />

	<macrodef name="project-file">
		<attribute name="name" />
		<attribute name="type" default="file" />
		<sequential>
			<property name="pd.@{name}" location="${project.dir}/@{name}" />
			<condition property="unavail.@{name}" value="" else="@{name}${line.separator}">
				<available file="${project.dir}/@{name}" type="@{type}" />
			</condition>
		</sequential>
	</macrodef>
	<project-file name="build-deploy.xml" />
	<project-file name="build.xml" />
	<project-file name="deploy.properties" />
	<project-file name="etc" type="dir" />
	<project-file name="ext" type="dir" />
	<project-file name="introduce.properties" />
	<project-file name="introduce.xml" />
	<project-file name="ivy.xml" />
	<project-file name="jndi-config.xml" />
	<project-file name="project.properties" />
	<project-file name="schema" type="dir" />
	<project-file name="server-config.wsdd" />
	<project-file name="service.properties" />
	<project-file name="src" type="dir" />
	<project-file name="tools" type="dir" />

	<target name="upgradeHelp" description="Prints description of how to use this script">
		<echo>This script is for migrating caGrid project directories that cannot </echo>
		<echo>be regenerated by introduce from older versions of caGrid to version ${target.version}.</echo>
		<echo>
		</echo>
		<echo>Operating instructions for this script appear at the end of this message.</echo>
		<echo>
		</echo>
		<echo>Regenerating a caGrid service using introduce is the preferred way  </echo>
		<echo>to migrate caGrid service from older versions of caGrid.  This script should be</echo>
		<echo>used only if regenerating the service with the introduce tool fails or is not  </echo>
		<echo>possible for some other reason.</echo>
		<echo>
		</echo>
		<echo>Regenerating a caGrid service is the supported migration route.  If it works,</echo>
		<echo>you can be confident that the resulting service will work as well as the</echo>
		<echo>original version of the service.</echo>
		<echo>
		</echo>
		<echo>This script is intended as a migration aid.  It will make changes to a project's</echo>
		<echo>source tree that are intended to move it closer to being a working caGrid ${target.version}</echo>
		<echo>service.  It may not do everything to a source tree that needs to be done.  This</echo>
		<echo>script may even introduce some new bugs!  It will be the responsibility of the</echo>
		<echo>person or organization running this script to resolve any differences between</echo>
		<echo>the desired result of running the script and the actual result.</echo>
		<echo></echo>
		<echo>Here is a summary of what this script does:</echo>
		<echo>* Verifies that the project directory has a structure consistent with an </echo>
		<echo>  introduce-generated project. </echo>
		<echo>* Verifies that some files that are no supposed to have been edited have</echo>
		<echo>  actually not been edited. </echo>
		<echo>* Creates a backup-copy of the source directory.</echo>
		<echo>* Replaces the build-deploy.xml file with a version ${target.version} build-deploy.xml file.</echo>
		<echo>* Updates the version numbers in project.properties.</echo>
		<echo>* If the project directory has an ivy.xml file then the script assumes that ivy</echo>
		<echo>  is used to manage external dependences and updates the versions of dependency</echo>
		<echo>  modules in the ivy.xml file to be consistent with the needs of caGrid ${target.version}.</echo>
		<echo></echo>
		<echo>* If the project directory does not have an ivy.xml file, then it assumes that</echo>
		<echo>  all of the externally created .jar files it needs are in its lib directory and</echo>
		<echo>  replaces .jar files in the lib directory that it recognizes with versions of</echo>
		<echo>  the files consistent with caGrid version ${target.version}.</echo>
		<echo>* It checks some introduce-generated .java files for the absence of methods that are</echo>
		<echo>  expected by caGrid ${target.version} but were not created by the older version of Introduce</echo>
		<echo>  that created the .java files.  It adds the missing methods to the .java files.</echo>
		<echo></echo>
		<echo>To run this script to upgrade an introduce-created project from an older version</echo>
		<echo>of caGrid to version ${target.version}, invoke this script like this:</echo>
		<echo>  ant ${ant.file} -Dproject.dir=projectDirectory toSha2</echo>
	</target>

	<target name="_init">
		<fail unless="project.dir">The ant property project.dir is not defined. It must have a value that is the path of the root directory of a project. This can be set from the command line by passing ant this switch: -Dproject.dir=projectDirectory</fail>

		<echo>Upgrading project in ${project.dir} to caGrid version ${target.version} using ant script in ${ant.file}</echo>
		<tstamp />
	</target>

	<target name="_verifyProjectDirectory">
		<condition property="isIntroduceGenerated">
			<and>
				<length string="${unavail.build-deploy.xml}" trim="true" length="0" />
				<length string="${unavail.build.xml}" trim="true" length="0" />
				<length string="${unavail.deploy.properties}" trim="true" length="0" />
				<length string="${unavail.etc}" trim="true" length="0" />
				<length string="${unavail.ext}" trim="true" length="0" />
				<length string="${unavail.introduce.properties}" trim="true" length="0" />
				<length string="${unavail.introduce.xml}" trim="true" length="0" />
				<length string="${unavail.ivy.xml}" trim="true" length="0" />
				<length string="${unavail.jndi-config.xml}" trim="true" length="0" />
				<length string="${unavail.project.properties}" trim="true" length="0" />
				<length string="${unavail.schema}" trim="true" length="0" />
				<length string="${unavail.server-config.wsdd}" trim="true" length="0" />
				<length string="${unavail.service.properties}" trim="true" length="0" />
				<length string="${unavail.src}" trim="true" length="0" />
				<length string="${unavail.tools}" trim="true" length="0" />
			</and>
		</condition>
		<fail unless="isIntroduceGenerated">
        The directory ${project.dir} does not contain everything that an introduce-created project directory is expected to create. One of the following is missing:
${unavail.build-deploy.xml}${unavail.build.xml}${unavail.deploy.properties}${unavail.etc}${unavail.ext}${unavail.introduce.properties}${unavail.introduce.xml}${unavail.ivy.xml}${unavail.jndi-config.xml}{unavail.project.properties}${unavail.schema}${unavail.server-config.wsdd}${unavail.service.properties}${unavail.src}${unavail.tools}
        </fail>
	</target>

	<target name="_checkFiles">
		<!-- To be compete, first check that our own files are present -->
		<condition property="build-deploy.new.exists">
			<available file="${build-deploy.new}" />
		</condition>
		<fail unless="build-deploy.new.exists">Unable to read file ${build-deploy.new}, which should be in the same directory as this ant script.</fail>
		<condition property="build-deploy.old.exists">
			<available file="${build-deploy.old}" />
		</condition>
		<fail unless="build-deploy.old.exists">Unable to read file ${build-deploy.old}, which should be in the same directory as this ant script.</fail>
		<condition property="build-deploy.1_2.exists">
			<available file="${build-deploy.1_2}" />
		</condition>
		<fail unless="build-deploy.old.exists">Unable to read file ${build-deploy.old}, which should be in the same directory as this ant script.</fail>

		<!-- Condition is true if the build-deploy.xml file matches caGrid 1.3 or 1.4 -->
		<condition property="build-deploy.isOld">
			<filesmatch file1="${build-deploy.old}" file2="${pd.build-deploy.xml}" textfile="true" />
		</condition>

		<!-- Condition is true if the build-deploy.xml file matches the sha2 release of caGrid -->
		<condition property="build-deploy.isNew">
			<filesmatch file1="${build-deploy.new}" file2="${pd.build-deploy.xml}" textfile="true" />
		</condition>

		<!-- Condition is true if the build-deploy.xml file matches caGrid 1.2 -->
		<condition property="build-deploy.is1_2">
			<filesmatch file1="${build-deploy.1_2}" file2="${pd.build-deploy.xml}" textfile="true" />
		</condition>

		<!-- If the build-deploy.xml file does not match any of the released versions of the file then assume it has been edited. -->
		<condition property="build-deploy.isEdited">
			<and>
				<not>
					<isset property="build-deploy.isOld" />
				</not>
				<not>
					<isset property="build-deploy.isNew" />
				</not>
				<not>
					<isset property="build-deploy.is1_2" />
				</not>
			</and>
		</condition>
		<fail if="build-deploy.isEdited">The file ${pd.build-deploy.xml} has been edited. Automated migration with an edited version of this file is not supported.</fail>
	</target>

	<!-- Create a copy of the project directory -->
	<target name="_backupDirectory" depends="_init">
		<property name="backup.dir" location="${project.dir}_${DSTAMP}${TSTAMP}" />
		<echo>Creating a backup copy of ${project.dir} named ${backup.dir}.</echo>
		<copy todir="${backup.dir}" preservelastmodified="true" overwrite="true">
			<fileset dir="${project.dir}" />
		</copy>
	</target>

	<target name="_replaceBuildDeployXml" unless="build-deploy.isNew">
		<echo>The content of file ${pd.build-deploy.xml} matches older versions of caGrid.  Replacing with new version of file.</echo>
		<move file="${pd.build-deploy.xml}" tofile="${project.dir}/build-deploy.xml.original" preservelastmodified="true" verbose="true" />
		<copy file="${build-deploy.new}" tofile="${pd.build-deploy.xml}" verbose="true" />
	</target>

	<target name="_okBuildDeployXml" if="build-deploy.isNew">
		<echo>The content of file ${pd.build-deploy.xml} matches the new version of caGrid.</echo>
	</target>

	<target name="_updateBuildDeployXml" depends="_checkFiles,_replaceBuildDeployXml,_okBuildDeployXml">
	</target>

	<target name="_updateFiles" depends="_checkFiles,_updateBuildDeployXml" />

	<target name="toSha2" description="Convert a project created by introduce from an older version of caGrid.  The root directory of the project must be specified as the value of the ant attribute project.dir.  You can invoke it using a command line like this: ant -Dproject.dir=projectDirectory toSha2" depends="_verifyProjectDirectory,_init,_checkFiles,_backupDirectory,_updateFiles">
	</target>
</project>