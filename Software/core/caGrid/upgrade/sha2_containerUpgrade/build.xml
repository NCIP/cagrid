<?xml version="1.0"?>
<!-- ================================================================= -->
<!-- Ant script for upgrading caGrid 1.2-1.4 projects to use SHA2      -->
<!-- ================================================================= -->
<project name="caGrid-sha2-upgrade" basedir="." default="upgradeHelp" xmlns:ivy="antlib:org.apache.ivy.ant">

	<property name="targetVersion" value="1.4.1" />

	<property name="dotCaGrid.dir" location="${user.home}/.cagrid" />
	<property name="installer.dir" location="${dotCaGrid.dir}/installer-${targetVersion}" />
	<property name="installer.properties" location="${installer.dir}/cagrid.installer.properties" />
	<property name="helper.dir" location="${basedir}/helper" />

	<!-- ======================== -->
	<!-- Require Java 1.6  -->
	<!-- ======================== -->
	<condition property="isJDK1.6" value="true">
		<equals arg1="${ant.java.version}" arg2="1.6" />
	</condition>
	<fail message="JDK 1.6 is currently required to build this project!" unless="isJDK1.6" />

	<!-- ================= -->
	<!-- Require ant 1.7.0 -->
	<!-- ================= -->
	<condition property="ant-is-exact-7">
		<antversion exactly="1.7.0" />
	</condition>
	<fail message="Ant version 1.7.0 (exactly) is required" unless="ant-is-exact-7" />

	<target name="upgradeHelp" description="Prints description of how to use this script">
		<echo>This script takes a caGrid 1.3 service that has been deployed into a tomcat</echo>
		<echo>container and copies it into a new tomcat container that was created by the</echo>
		<echo>caGrid ${targetVersion} installer.  It replaces jars and may do some other things so that the</echo>
		<echo>caGrid service will function in a ${targetVersion} environment.</echo>
		<echo>
		</echo>
		<echo>No guarantee is made that the service will work correctly in its new</echo>
		<echo>environment, though that is the goal.</echo>
		<echo>
		</echo>
		<echo>To run this script to move a deployed caGrid 1.3 service into a caGrid ${targetVersion}</echo>
		<echo>environment, first copy the caGrid 1.3 tomcat container directory (it will</echo>
		<echo>usually be named apache-tomcat-5.5.27) to a location on the VM that will host</echo>
		<echo>the caGrid ${targetVersion} version of the service.</echo>
		<echo>
		</echo>
		<echo>Next, install caGrid ${targetVersion} and use the installer to create a tomcat container</echo>
		<echo>for the service. Be sure not to put it under the same directory is the caGrid 1.3</echo>
		<echo>container.</echo>
		<echo>
		</echo>
		<echo>After you have done the things described above, assuming that the environment</echo>
		<echo>variable CONTAINER_1.3 is defined at the path of the caGrid 1.3 tomcat container</echo>
		<echo>and CATALINA_HOME is the path of the newly created caGrid ${targetVersion} tomcat container,</echo>
		<echo>invoke this script like this:</echo>
		<echo>  ant -f $CAGRID_HOME/upgrade/sha2_containerUpgrade/build.xml -Dcontainer_1.3=$CONTAINER_1.3 -DnewContainer=$CATALINA_HOME move</echo>
	</target>

	<target name="init">
		<tstamp />

		<!-- Find caGrid home -->
		<fail message="${dotCaGrid.dir} does not exist or is not accessible!">
			<condition>
				<not>
					<available file="${dotCaGrid.dir}" />
				</not>
			</condition>
		</fail>
		<fail message="${installer.dir} does not exist or is inaccessable!  Have you installed caGrid ${targetVersion}?">
			<condition>
				<not>
					<available file="${installer.dir}" />
				</not>
			</condition>
		</fail>
		<loadproperties srcfile="${installer.properties}" />
		<fail unless="cagrid.home">CaGrid ${targetVersion} installer appears to have run, but no value is set for the cagrid.home property.</fail>
		<echo>CaGrid home is ${cagrid.home}.</echo>
	</target>

	<!-- - - - - - - - - - - - - - - - - - 
          target: _verifyContainer_1.3                      
         - - - - - - - - - - - - - - - - - -->
	<target name="_verifyContainer_1.3">
		<fail unless="container_1.3">container_1.3 is not defined.  It should be defined on the command line as the absolute path of the caGrid 1.3 tomcat container.</fail>

		<fail message="${container_1.3} does not exist or is not accessible.">
			<condition>
				<not>
					<available file="${container_1.3}" />
				</not>
			</condition>
		</fail>

		<fail message="${container_1.3} does not look like a caGrid 1.3 tomcat container.">
			<condition>
				<not>
					<and>
						<available file="${container_1.3}/common" />
						<available file="${container_1.3}/common/lib" />
						<available file="${container_1.3}/common/lib/jce-jdk13-125.jar" type="file" />
						<available file="${container_1.3}/common/lib/log4j-1.2.8.jar" type="file" />
						<available file="${container_1.3}/webapps" />
						<available file="${container_1.3}/webapps/wsrf" />
						<available file="${container_1.3}/webapps/wsrf/WEB-INF" />
						<available file="${container_1.3}/webapps/wsrf/WEB-INF/lib" />
						<available file="${container_1.3}/webapps/wsrf/WEB-INF/lib/caGrid-core-1.3.jar" type="file" />
						<available file="${container_1.3}/webapps/wsrf/WEB-INF/etc" type="dir" />
					</and>
				</not>
			</condition>
		</fail>

		<echo>${container_1.3} appears to be a caGrid 1.3 tomcat container.</echo>

		<available file="${container_1.3}/webapps/wsrf/WEB-INF/etc/cagrid_TransferService" property="usesTranserService" />
		<property name="oldSchema.dir" location="${container_1.3}/webapps/wsrf/share/schema" />
	</target>

	<!-- - - - - - - - - - - - - - - - - - 
          target: _verifyNewContainer                      
         - - - - - - - - - - - - - - - - - -->
	<target name="_verifyNewContainer">
		<fail unless="newContainer">newContainer is not defined.  It should be defined on the command line as the absolute path of the caGrid ${targetVersion} tomcat container.</fail>

		<fail message="${newContainer} does not exist or is not accessible.">
			<condition>
				<not>
					<available file="${newContainer}" />
				</not>
			</condition>
		</fail>

		<fail message="${newContainer} does not look like a caGrid ${targetVersion} tomcat container.">
			<condition>
				<not>
					<and>
						<available file="${newContainer}/common" type="dir" />
						<available file="${newContainer}/common/lib" type="dir" />
						<available file="${newContainer}/common/lib/bcprov-jdk15-145.jar" type="file" />
						<available file="${newContainer}/common/lib/log4j-1.2.14.jar" type="file" />
						<available file="${newContainer}/webapps" />
						<available file="${newContainer}/webapps/wsrf" />
						<available file="${newContainer}/webapps/wsrf/WEB-INF" />
						<available file="${newContainer}/webapps/wsrf/WEB-INF/lib" />
						<available file="${newContainer}/webapps/wsrf/WEB-INF/lib/caGrid-core-${targetVersion}.jar" type="file" />
						<available file="${newContainer}/webapps/wsrf/WEB-INF/etc" type="dir" />
						<available file="${newContainer}/webapps/wsrf/share/schema" type="dir" />
					</and>
				</not>
			</condition>
		</fail>

		<property name="newEtc.dir" location="${newContainer}/webapps/wsrf/WEB-INF/etc" />
		<property name="newSchema.dir" location="${newContainer}/webapps/wsrf/share/schema" />
	</target>


	<!-- - - - - - - - - - - - - - - - - - 
          target: _identifyServiceDirectory                      
         - - - - - - - - - - - - - - - - - -->
	<target name="_identifyServiceDirectory" unless="service.dir">
		<pathconvert property="service.dir" pathsep="${line.separator}">
			<dirset dir="${container_1.3}/webapps/wsrf/WEB-INF/etc">
				<include name="cagrid_*" />
				<exclude name="cagrid_SyncGTS" />
				<exclude name="cagrid_TransferService" />
			</dirset>
		</pathconvert>
		<fail message="There are multiple service directories in the old tomcat container.  Re-run this script, adding to the command line &quot;-Dservice.dir=&quot; followed by one of the following paths:${line.separator}${service.dir}">
			<condition>
				<contains string="${service.dir}" substring="${line.separator}" />
			</condition>
		</fail>
		<echo>Service directory is ${service.dir}</echo>
	</target>

	<!-- - - - - - - - - - - - - - - - - - 
          target: deployTransferService                      
         - - - - - - - - - - - - - - - - - -->
	<target name="deployTransferService" if="usesTranserService">
		<ant dir="${cagrid.home}/projects/transfer" antfile="build.xml" target="deployTomcat" inheritall="true">
			<property name="tomcat.dir" location="${newContainer}" />
		</ant>
	</target>


	<target name="move" description="Move a caGrid service from a caGrid 1.3 tomcat container to a newly created caGrid ${targetVersion} container (run upgradeHelp target for details)." depends="init,_verifyContainer_1.3,_verifyNewContainer,_identifyServiceDirectory,deployTransferService">
		<!-- copy .xsd files -->
		<copy todir="${newContainer}/webapps/wsrf/lib">
			<fileset dir="${container_1.3}/webapps/wsrf/WEB-INF/lib">
				<include name="*.cert" />
				<include name="*.cert.*" />
				<include name="*.properties" />
				<include name="*.properties.*" />
				<include name="*.wsdl" />
				<include name="*.wsdl.*" />
				<include name="*.xml" />
				<include name="*.xml.*" />
				<include name="*.xsd" />
				<include name="*.xsd.*" />
			</fileset>
		</copy>

		<!-- Copy service directory -->
		<basename file="${service.dir}" property="service.dir.name" />
		<property name="newService.dir" location="${newEtc.dir}/${service.dir.name}" />

		<pathconvert property="service.name" >
			<map from="${basedir}/cagrid_" to='' />
			<path location="${service.dir.name}" />
		</pathconvert>
		
		<echo>Service name is ${service.name}</echo>

		<!-- Copy wsdl and schemas -->
		<copy todir="${newSchema.dir}/${service.name}">
			<fileset dir="${oldSchema.dir}/${service.name}" />
		</copy>

		<echo>Copying contents of old service directory (${service.dir}) to directory ${newService.dir}</echo>
		<copy todir="${newService.dir}">
			<fileset dir="${service.dir}" />
		</copy>

		<!-- copy .jar file from appropriate places while updating introduceDeployment.xml -->
		<ant antfile="build.xml" dir="${helper.dir}" target="run" inheritall="false">
			<property name="cagrid.home" value="${cagrid.home}" />
			<property name="service.dir" location="${service.dir}" />
			<property name="newContainer" location="${newContainer}" />
		</ant>
	</target>
</project>