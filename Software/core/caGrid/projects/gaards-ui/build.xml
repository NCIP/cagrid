<?xml version="1.0"?>
<!--
Adopted and modified from GSBT
GSBT - Globus Service Build Tools
-->
<project default="all" name="caGrid Security UI" basedir=".">
	<description>
		caGrid Security UI buildfile
    </description>
	<!-- Define the environment variable -->

	<property environment="env" />
	<property file="${basedir}/project.properties" />
	<property file="${basedir}/build.properties" />
	<property name="globus.location" location="${env.GLOBUS_LOCATION}" />

	<property name="jar.name" value="caGrid-gaards-ui-${project.version}.jar" />
	<property name="jar.config.name" value="caGrid-gaards-ui-config-${project.version}.jar" />

	<!-- Important directories and files -->
	<property name="src.dir" value="src" />
	<property name="images.dir" value="resources/images" />
	<property name="common.images" value="${images.dir}/common" />
	<property name="dorian.images" value="${images.dir}/dorian" />
	<property name="gts.images" value="${images.dir}/gts" />
	<property name="gridgrouper.images" value="${images.dir}/gridgrouper" />
	<property name="cds.images" value="${images.dir}/cds" />
	
	<property name="configuration.dir" value="resources/configuration" />

	<property name="ext.dir" location="${basedir}/ext" />
	<property name="endorsed.lib.dir" location="${ext.dir}/dependencies/endorsed/jars" />
	<property name="ext.lib.dir" location="${ext.dir}/dependencies/impl/jars" />

	<property name="etc.dir" value="etc" />

	<property name="runtime.mainclass" value="org.cagrid.grape.GAARDSApplication" />

	<!-- Build directories -->

	<!-- Auxiliary directory where all the intermediate files will be placed -->
	<property name="build.dir" location="build" />
	<!-- Directory for compiled service classes -->
	<property name="build.dest" location="${build.dir}/classes" />
	<!-- Directory for compiled JAR files (additional library files required by
	     the service will also be placed here) -->
	<property name="build.lib.dir" location="${build.dir}/lib" />
	<!-- Directory where stub source and class files are placed -->


	<!-- Miscellaneous properties -->

	<!-- This property is defined simply so we can write ${sep} instead of
	     ${file.separator}, which makes some expressions too long -->
	<property name="sep" value="${file.separator}" />
	<!-- We want detailed error messages -->
	<property name="java.debug" value="on" />

	<!-- Sets up the build directory structure -->
	<target name="init">
		<mkdir dir="${build.dir}" />
		<mkdir dir="${build.dest}" />
		<mkdir dir="${build.lib.dir}" />
	</target>


	<target name="defineClasspaths">
		<path id="base.classpath">
			<fileset dir="${ext.lib.dir}">
				<include name="*.jar" />
			</fileset>
		</path>
		<path id="run.classpath">
			<pathelement location="${build.dest}" />
			<path refid="base.classpath" />
			<pathelement location="${common.images}" />
			<pathelement location="${dorian.images}" />
			<pathelement location="${gts.images}" />
			<pathelement location="${gridgrouper.images}" />
			<pathelement location="${cds.images}" />
			<pathelement location="${configuration.dir}" />

		</path>
	</target>


	<!-- Compile the implementation classes (service, resource, etc.) -->
	<target name="compile" depends="init,defineClasspaths">
		<javac srcdir="${src.dir}" classpathref="base.classpath" destdir="${build.dest}" debug="${java.debug}" deprecation="${deprecation}">

		</javac>
	</target>


	<target name="jar" depends="compile">		
		<pathconvert property="manifest.classpath" pathsep=" ">
			<path location="${jar.config.name}" />
			<path refid="run.classpath" />
			<mapper>
				<chainedmapper>
					<flattenmapper />
					<globmapper from="*.jar" to="lib/*.jar" />
				</chainedmapper>
			</mapper>
		</pathconvert>
	
		<jar jarfile="${build.lib.dir}/${jar.name}" >
			<manifest>
				<attribute name="Built-By" value="${user.name}" />
				<attribute name="Specification-Version" value="${project.version}" />
				<attribute name="Implementation-Version" value="${project.version}" />
				<attribute name="Main-Class" value="${runtime.mainclass}" />
				<attribute name="Class-Path" value="${manifest.classpath}" />
			</manifest>

			<fileset dir="${build.dest}">
				<include name="**/**" />
			</fileset>

			<fileset dir="${common.images}">
				<include name="**" />
			</fileset>

			<fileset dir="${dorian.images}">
				<include name="**" />
				<exclude name="view-refresh.png" />
			</fileset>

			<fileset dir="${gts.images}">
				<include name="**" />
				<exclude name="view-refresh.png" />
			</fileset>

			<fileset dir="${gridgrouper.images}">
				<include name="**" />
				<exclude name="view-refresh.png" />
			</fileset>

			<fileset dir="${cds.images}">
				<include name="**" />
				<exclude name="view-refresh.png" />
			</fileset>
						
		</jar>
		
		<jar jarfile="${build.lib.dir}/${jar.config.name}">
			<fileset dir="${configuration.dir}">
				<include name="**" />
			</fileset>
			<fileset file="${basedir}/project.properties" />
		</jar>

	</target>

	<!-- Clean up all the intermediate files -->
	<target name="clean">
		<delete dir="tmp" />
		<delete dir="${build.dir}" />
	</target>


	<!-- Default target "all" generates the GAR file -->
	<target name="all" depends="jar" />

	<!-- Post Introduce Edit-->
	<target name="ui" description="Run the Security UI" depends="defineClasspaths">
		<java classname="${runtime.mainclass}" classpathref="run.classpath" fork="yes">
			<jvmarg value="-Djava.endorsed.dirs=${endorsed.lib.dir}" />
		</java>
	</target>


	<target name="installIntroduceExtensions">

		<delete dir="${introduce.extensions.dir}/cagrid_gaards_ui" />
		<mkdir dir="${introduce.extensions.dir}/cagrid_gaards_ui" />

		<!-- extension description file -->
		<copy overwrite="true" todir="${introduce.extensions.dir}/cagrid_gaards_ui" file="extension/extension.xml" />
		<!-- libraries -->
		<copy overwrite="true" todir="${introduce.extensions.dir}/lib">
			<fileset dir="build/lib">
				<include name="*.jar" />
			</fileset>
			<fileset dir="ext/dependencies/impl/jars">
				<include name="*.jar" />
			</fileset>
		</copy>
		<!-- endorsed libraries -->
		<copy overwrite="true" todir="${introduce.extensions.dir}/endorsed">
			<fileset dir="${endorsed.lib.dir}">
				<include name="*.jar" />
			</fileset>
		</copy>
		<!-- gui configuration -->
		<copy overwrite="true" todir="${introduce.extensions.dir}/cagrid_gaards_ui">
			<fileset dir="ext/target_grid">
				<include name="*.xml" />
			</fileset>
		</copy>

	</target>
	
	<target name="standalone" description="Creates a zip containing all files needed to run the GAARDS UI without the rest of the caGrid software.">
		<mkdir dir="${build.dir}/gaards/lib" />
		<mkdir dir="${build.dir}/gaards/endorsed" />
		<copy todir="${build.dir}/gaards/lib">
			<fileset dir="ext/dependencies/impl/jars">
				<include name="*.jar" />
			</fileset>
		</copy>
		<copy todir="${build.dir}/gaards/endorsed">
			<fileset dir="${endorsed.lib.dir}">
				<include name="*.jar" />
			</fileset>
		</copy>
		
		<copy todir="${build.dir}/gaards" file="${build.lib.dir}/${jar.name}" />
		<copy todir="${build.dir}/gaards/lib" file="${build.lib.dir}/${jar.config.name}" />

		<copy todir="${build.dir}/gaards">
			<fileset dir="resources/standalone">
				<include name="run.*" />
			</fileset>
		</copy>
		
		<replace dir="${build.dir}/gaards" value="${project.version}" >
			<include name="run.*" />
			<replacetoken>@project.version@</replacetoken>
		</replace>

		<zip destfile="${build.dir}/gaards.zip" basedir="${build.dir}/gaards" >
		</zip>
		
	</target>


</project>