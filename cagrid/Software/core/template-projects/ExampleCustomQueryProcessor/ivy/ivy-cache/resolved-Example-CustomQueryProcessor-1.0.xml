<ivy-module version="2.0">
	<!-- organisation should be indicitative of your overarching project or group.
		module should be the sub-project or piece of functionality you've implemented.
		For example, caGrid's data service project uses "caGrid" and "data" respectively.
		Revision should reflect the version number of your custom query processor. -->
	<info organisation="Example" module="CustomQueryProcessor" revision="1.0" status="integration" publication="20110621143038">
		<!-- Other options here include licenses, or links to licenses -->
		<description>Example custom query processor</description>
	</info>
	
	<!-- A configuration in ivy is a like group of functionality.  Usually this
		should correspond 1:1 with the source folders and jars your project delivers -->
	<configurations>
		<conf name="default" visibility="public"/>
	</configurations>
	
	<!-- Publications are the artifacts your project produces for public consumption.
		Here, we're publishing the artifact to our default configuration. Any downstream
		projects that depend on our default configuration will also recieve any of the
		dependencies our default configuration needs -->
	<publications>
		<artifact name="${ivy.organisation}${ivy.module}" conf="default" type="jar"/>
	</publications>
	
	<!-- Dependencies are artifacts your code needs to either build or run.
		In this case, we define that our "default" configuration needs the 
		"processors" configuration from caGrid's "data" project. We'll get 
		all the dependencies that the "processors" configuration needs as well -->
	<dependencies>
		<!-- caGrid dependencies -->
    	<dependency rev="1.4" org="caGrid" name="data" conf="default->processors"/>
	</dependencies>
</ivy-module>
