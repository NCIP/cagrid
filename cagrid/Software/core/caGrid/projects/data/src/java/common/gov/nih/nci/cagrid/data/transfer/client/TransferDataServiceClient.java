package gov.nih.nci.cagrid.data.transfer.client;

import gov.nih.nci.cagrid.data.transfer.common.TransferDataServiceI;
import gov.nih.nci.cagrid.data.transfer.stubs.TransferDataServicePortType;
import gov.nih.nci.cagrid.data.transfer.stubs.service.TransferDataServiceAddressingLocator;
import gov.nih.nci.cagrid.introduce.security.client.ServiceSecurityClient;

import java.io.InputStream;
import java.rmi.RemoteException;

import javax.xml.namespace.QName;

import org.apache.axis.EngineConfiguration;
import org.apache.axis.client.AxisClient;
import org.apache.axis.client.Stub;
import org.apache.axis.configuration.FileProvider;
import org.apache.axis.message.addressing.EndpointReferenceType;
import org.apache.axis.types.URI.MalformedURIException;
import org.apache.axis.utils.ClassUtils;
import org.cagrid.dataservice.transfer.stubs.Cql2TransferDataServicePortType;
import org.cagrid.transfer.context.stubs.types.TransferServiceContextReference;
import org.globus.gsi.GlobusCredential;
import org.oasis.wsrf.properties.GetResourcePropertyResponse;


/**
 * This class is autogenerated, DO NOT EDIT GENERATED GRID SERVICE METHODS.
 * 
 * This client is generated automatically by Introduce to provide a clean
 * unwrapped API to the service.
 * 
 * On construction the class instance will contact the remote service and
 * retrieve it's security metadata description which it will use to configure
 * the Stub specifically for each method call.
 * 
 * @created by Introduce Toolkit version 1.0
 */
public class TransferDataServiceClient extends ServiceSecurityClient implements TransferDataServiceI {
    protected TransferDataServicePortType portType;
    protected Cql2TransferDataServicePortType cql2PortType;
    private Object portTypeMutex;


    public TransferDataServiceClient(String url) throws MalformedURIException, RemoteException {
        this(url, null);
    }


    public TransferDataServiceClient(String url, GlobusCredential proxy) throws MalformedURIException, RemoteException {
        super(url, proxy);
        initialize();
    }


    public TransferDataServiceClient(EndpointReferenceType epr) throws MalformedURIException, RemoteException {
        this(epr, null);
    }


    public TransferDataServiceClient(EndpointReferenceType epr, GlobusCredential proxy) throws MalformedURIException,
        RemoteException {
        super(epr, proxy);
        initialize();
    }


    private void initialize() throws RemoteException {
        this.portTypeMutex = new Object();
        this.portType = createPortType();
        this.cql2PortType = createCql2PortType();
    }


    private TransferDataServicePortType createPortType() throws RemoteException {

        TransferDataServiceAddressingLocator locator = new TransferDataServiceAddressingLocator();
        // attempt to load our context sensitive wsdd file
        InputStream resourceAsStream = getClass().getResourceAsStream("client-config.wsdd");
        if (resourceAsStream != null) {
            // we found it, so tell axis to configure an engine to use it
            EngineConfiguration engineConfig = new FileProvider(resourceAsStream);
            // set the engine of the locator
            locator.setEngine(new AxisClient(engineConfig));
        }
        TransferDataServicePortType port = null;
        try {
            port = locator.getTransferDataServicePortTypePort(getEndpointReference());
        } catch (Exception e) {
            throw new RemoteException("Unable to locate portType:" + e.getMessage(), e);
        }

        return port;
    }


    private Cql2TransferDataServicePortType createCql2PortType() throws RemoteException {

        org.cagrid.dataservice.transfer.stubs.service.TransferDataServiceAddressingLocator locator = new org.cagrid.dataservice.transfer.stubs.service.TransferDataServiceAddressingLocator();
        // attempt to load our context sensitive wsdd file
        InputStream resourceAsStream = getClass().getResourceAsStream("client-config.wsdd");
        if (resourceAsStream != null) {
            // we found it, so tell axis to configure an engine to use it
            EngineConfiguration engineConfig = new FileProvider(resourceAsStream);
            // set the engine of the locator
            locator.setEngine(new AxisClient(engineConfig));
        }
        Cql2TransferDataServicePortType port = null;
        try {
            port = locator.getCql2TransferDataServicePortTypePort(getEndpointReference());
        } catch (Exception e) {
            throw new RemoteException("Unable to locate portType:" + e.getMessage(), e);
        }

        return port;
    }


    public GetResourcePropertyResponse getResourceProperty(QName resourcePropertyQName) throws RemoteException {
        return portType.getResourceProperty(resourcePropertyQName);
    }


    public static void usage() {
        System.out.println(TransferDataServiceClient.class.getName() + " -url <service url>");
    }


    public static void main(String[] args) {
        System.out.println("Running the Grid Service Client");
        try {
            if (!(args.length < 2)) {
                if (args[0].equals("-url")) {
                    TransferDataServiceClient client = new TransferDataServiceClient(args[1]);
                    // place client calls here if you want to use this main as a
                    // test....
                } else {
                    usage();
                    System.exit(1);
                }
            } else {
                usage();
                System.exit(1);
            }
        } catch (Exception e) {
            e.printStackTrace();
            System.exit(1);
        }
    }


    /**
     * @deprecated As of caGrid 1.4, CQL 2 is the preferred query language.
     *             http://cagrid.org/display/dataservices/CQL+2 Use
     *             {@link #executeTransferQuery(org.cagrid.cql2.CQLQuery)}
     */
    @Deprecated
    public TransferServiceContextReference transferQuery(gov.nih.nci.cagrid.cqlquery.CQLQuery query)
        throws RemoteException, gov.nih.nci.cagrid.data.faults.MalformedQueryExceptionType,
        gov.nih.nci.cagrid.data.faults.QueryProcessingExceptionType {
        synchronized (portTypeMutex) {
            configureStubSecurity((Stub) portType, "transferQuery");
            gov.nih.nci.cagrid.data.transfer.stubs.TransferQueryRequest params = new gov.nih.nci.cagrid.data.transfer.stubs.TransferQueryRequest();
            gov.nih.nci.cagrid.data.transfer.stubs.TransferQueryRequestCqlQuery queryContainer = new gov.nih.nci.cagrid.data.transfer.stubs.TransferQueryRequestCqlQuery();
            queryContainer.setCQLQuery(query);
            params.setCqlQuery(queryContainer);
            gov.nih.nci.cagrid.data.transfer.stubs.TransferQueryResponse boxedResult = portType.transferQuery(params);
            return boxedResult.getTransferServiceContextReference();
        }
    }


    public TransferServiceContextReference executeTransferQuery(org.cagrid.cql2.CQLQuery query) throws RemoteException,
        gov.nih.nci.cagrid.data.faults.MalformedQueryExceptionType,
        gov.nih.nci.cagrid.data.faults.QueryProcessingExceptionType {
        synchronized (portTypeMutex) {
            configureStubSecurity((Stub) cql2PortType, "executeTransferQuery");
            org.cagrid.dataservice.transfer.stubs.ExecuteTransferQueryRequest params = new org.cagrid.dataservice.transfer.stubs.ExecuteTransferQueryRequest();
            org.cagrid.dataservice.transfer.stubs.ExecuteTransferQueryRequestCqlQuery queryContainer = new org.cagrid.dataservice.transfer.stubs.ExecuteTransferQueryRequestCqlQuery();
            queryContainer.setCQLQuery(query);
            params.setCqlQuery(queryContainer);
            org.cagrid.dataservice.transfer.stubs.ExecuteTransferQueryResponse boxedResult = cql2PortType
                .executeTransferQuery(params);
            return boxedResult.getTransferServiceContextReference();
        }
    }


    public gov.nih.nci.cagrid.metadata.security.ServiceSecurityMetadata getServiceSecurityMetadata()
        throws RemoteException {
        synchronized (portTypeMutex) {
            configureStubSecurity((Stub) portType, "getServiceSecurityMetadata");
            gov.nih.nci.cagrid.introduce.security.stubs.GetServiceSecurityMetadataRequest params = new gov.nih.nci.cagrid.introduce.security.stubs.GetServiceSecurityMetadataRequest();
            gov.nih.nci.cagrid.introduce.security.stubs.GetServiceSecurityMetadataResponse boxedResult = portType
                .getServiceSecurityMetadata(params);
            return boxedResult.getServiceSecurityMetadata();
        }
    }

}
