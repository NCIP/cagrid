<link type="text/css" rel="stylesheet"
      href="<c:url value="/js/yui/assets/skins/sam/datatable.css"/>"/>
<link type="text/css" rel="stylesheet" href="<c:url value="/js/yui/treeview/assets/skins/sam/treeview.css"/>"/>
<link rel="stylesheet" type="text/css" href="<c:url value="/js/yui/paginator/assets/skins/sam/paginator.css"/>"/>

<script type="text/javascript" src="<c:url value="/js/scriptaculous/prototype.js"/>"></script>

<script type="text/javascript" src="<c:url value="/js/yui/yahoo-dom-event/yahoo-dom-event.js"/>"></script>
<script type="text/javascript" src="<c:url value="/js/yui/element/element-min.js"/>"></script>
<script type="text/javascript" src="<c:url value="/js/yui/datasource/datasource-min.js"/>"></script>
<script type="text/javascript" src="<c:url value="/js/yui/json/json-min.js"/>"></script>
<script type="text/javascript" src="<c:url value="/js/yui/connection/connection-min.js"/>"></script>
<script type="text/javascript" src="<c:url value="/js/yui/get/get-min.js"/>"></script>
<script type="text/javascript" src="<c:url value="/js/yui/logger/logger-min.js"/>"></script>
<script type="text/javascript" src="<c:url value="/js/yui/animation/animation-min.js"/>"></script>
<script src="<c:url value="/js/yui/treeview/treeview-min.js"/>"></script>
<script type="text/javascript" src="<c:url value="/js/yui/paginator/paginator-min.js"/>"></script>


<div id="myLogger"><%--logging--%></div>

<script src="<c:url value="/js/browse-catalog.js"/>"></script>

<script type="text/javascript">
    //        var myLogReader = new YAHOO.widget.LogReader("myLogger");

    var resultEvent = new YAHOO.util.CustomEvent({type:"resultEvent",signature:"YAHOO.util.CustomEvent.FLAT"});
    var solrDatasource = new YAHOO.util.XHRDataSource("<c:out value="${solrServiceUrl}"/>/select?", {responseType:YAHOO.util.XHRDataSource.JSON});

    <%--Represents the summary tree for filtering search results--%>
    var SummaryTree = Class.create({
        initialize: function(catalog) {
            var searchTerm = catalog.config.keyword;
            var treeDiv = catalog.config.treeDiv;
            this.tree = new YAHOO.widget.TreeView(document.getElementById(treeDiv));

            <%--onClick callback--%>
            this.tree.subscribe("labelClick", function(node) {
                catalog.config.catalogType = node.data.type;
                this.destroy();
                new Catalogs(catalog.config);
            });

            var root = this.tree.getRoot();
            this.categoryNode = new YAHOO.widget.TextNode({label:"Category"}, root, true);
            this.treeNodes = new Array();

            var searchCallback = function (oRequest, oParsedResponse, oPayload) {
                var solrJSON = YAHOO.lang.JSON.parse(oParsedResponse.results.responseText);
                var resultList = solrJSON.response.docs;
                this.tree.removeChildren(this.categoryNode);

                for (var i = 0, len = resultList.length; i < len; ++i) {
                    this.addNode(resultList[i], this);
                }

                this.buildTree(this.categoryNode, this);
                this.categoryNode.refresh();
                this.categoryNode.expand();
            };

            <%--get all rows--%>
            var summaryQuery = new solrQuery(searchTerm, 100000);
            <%--only get catalog_type field for makign summary tree--%>
            summaryQuery.addParam("fl=catalog_type");
            YAHOO.log("Summary query is " + summaryQuery.getQuery());

            solrDatasource.sendRequest(summaryQuery.getQuery(), {
                success : searchCallback,
                failure : searchCallback,
                scope : this
            });
            this.tree.render();
        },

        addNode: function(result, sTree) {
            var typeLabel = result.catalog_type;
            var categoryNode = sTree.treeNodes.findByLabel(typeLabel);

            if (null == categoryNode) {
                sTree.treeNodes.push(new SearchTreeNode(typeLabel));
            }
            <!--else update the count-->
            else {
                categoryNode.addCount();
            }

        },
        buildTree: function(rootNode, sTree) {
            for (var i = 0; i < sTree.treeNodes.length; i++) {
                new YAHOO.widget.TextNode(sTree.treeNodes[i], rootNode);
            }
        }
    });


    <%--represents the catalog search/browse results object--%>
    var Catalogs = Class.create({

        initialize: function(config) {
            this.rowsPerPage = 10;
            this.config = {keyword:config.keyword,treeDiv:config.treeDiv,catalogType:config.catalogType,rowsPerPage:config.rowsPerPage,paginatorDiv:config.paginatorDiv};

            if (this.config.rowsPerPage)
                this.rowsPerPage = this.config.rowsPerPage;

            this.paginator = new YAHOO.widget.Paginator({
                rowsPerPage  : this.rowsPerPage,
                alwaysVisible: false,
                containers   : [this.config.paginatorDiv] // or idStr or elem or [ elem, elem ]
            });
            this.paginator.subscribe('changeRequest', this.handlePagination, this);

            this.query = new solrQuery(this.config.keyword, this.rowsPerPage);

            if (this.config.catalogType) {
                this.query.addFacet("catalog_type", this.config.catalogType);
            }

            new SummaryTree(this);

            this.runQuery();

        },

        runQuery: function() {
            var searchCallback = function (oRequest, oParsedResponse, oPayload) {
                try {
                    var solrJSON = YAHOO.lang.JSON.parse(oParsedResponse.results.responseText);
                    var resultList = solrJSON.response.docs;
                    this.setupPaginator({start:solrJSON.response.start, count:solrJSON.response.numFound});
                    YAHOO.log("Firing result event");
                    resultEvent.fire(resultList);
                }
                catch (x) {
                    alert("JSON Parse failed!" + x);
                    return;
                }
            };

            var failureCallback = function (o) {
                alert("Async call failed!");
                if (!YAHOO.util.Connect.isCallInProgress(o)) {
                    alert("Async call failed!");
                }
            };

            solrDatasource.sendRequest(this.query.getQuery(), {success : searchCallback,
                failure : failureCallback,
                scope : this});
        },

        setupPaginator: function(result) {
            this.paginator.setState({totalRecords:result.count,recordOffset:result.start});
            this.paginator.render();

        },

        handlePagination: function(newState, cat) {
            cat.paginator.setState(newState);
            cat.query.setStartValue(newState.recordOffset);
            cat.runQuery();

        }
    });


</script>

