<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<HTML><HEAD><TITLE>Utilizing the Factory Pattern</TITLE>
<META http-equiv=Content-Type content="text/html; charset=Windows-1252"><LINK 
href="Theme/lf.css" type=text/css rel=stylesheet><LINK 
href="LinksExt/C1H_HTML.css" type=text/css rel=stylesheet>
<META content="MSHTML 6.00.6001.18203" name=GENERATOR></HEAD>
<BODY 
style="PADDING-RIGHT: 0px; PADDING-LEFT: 10px; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; BACKGROUND-COLOR: transparent" 
relPart="">
<DIV class=d2h_secondary_topic 
style="PADDING-RIGHT: 0pt; PADDING-LEFT: 0pt; PADDING-BOTTOM: 10pt; MARGIN: 0pt; PADDING-TOP: 0pt">
<H4><A name=DevelopersGuide-UtilizingtheFactoryPatte></A>Utilizing the Factory 
Pattern</H4>
<P class=msonormal><A 
href="https://project.bmi.ohio-state.edu/gf/download/frsrelease/106/278/CounterServiceExample.zip"><FONT 
style="COLOR: #3366bb">Link to the entire example service source code described 
below</FONT><FONT 
style="COLOR: windowtext; TEXT-DECORATION: none; text-underline: none"><SUP><FONT 
style="COLOR: blue"><IMG alt=https://wiki.cagrid.org/images/icons/linkext7.gif 
src="ImagesExt/image20_3.png" border=0></FONT></SUP></FONT></A></P>
<P class=msonormal><IMG 
alt=https://wiki.cagrid.org/download/attachments/2917693/worddav3d161c4686347007235e7352b5f5443f.png 
src="ImagesExt/image20_17.png" border=0></P>
<P class=msonormal>Utilizing Grid Service Factory Pattern<BR>In order to create 
instances of a resource something must tell the resource home of the service to 
create them. This is typically done using the factory pattern. A service or 
method is responsible for telling the resource to create a new instance of a 
resource type for the service. An example of the factory pattern in action is 
show it the image above. A factory service, the Counter Grid Service, contains a 
create operation which is exposed as a grid service method. When the client 
invokes this method the Counter Grid Service will locate the resource home of 
the Counter Context Grid Service and ask it to create a new resource instance. 
Once this resource intance is created the resource home will return a pointer or 
address to this resource instance called an EndPointReference (EPR). This EPR is 
then returned from the create method back to the client so that it has a pointer 
to these new resource that it can act on.<BR>In order to act on this resource it 
will need to construct a client which can talk to the grid service which 
represents this resource type. The Counter Context Client will be constructed 
using the EPR to address the specific resource context for the service. Next the 
user would like to call the <I>incrementCounter()</I> operation on the Counter 
Context Grid Service. The client will make the call to the grid service and the 
service will then look at the EPR sent over by the client. The service will then 
take the EPR and give it to the resource home and ask for the resource instance 
back which is represented by the particular EPR. The the service will run it's 
logic to increment the counter, which in this case is represented as a resource 
property of the resource.</P>
<P class=msonormal><IMG 
alt=https://wiki.cagrid.org/download/attachments/2917693/worddav119096107f4fec6ce173bd9876d48365.png 
src="ImagesExt/image20_18.png" border=0></P>
<P class=msonormal>Invoking a Statefull Grid Services<BR>Below shows an example 
of the code that would be required to implement the <I>incrementCounter()</I> 
method in the CounterContextServiceImpl.java.</P>
<P class=msonormal 
style="tab-stops: 45.8pt 91.6pt 137.4pt 183.2pt 229.0pt 274.8pt 320.6pt 366.4pt 412.2pt 458.0pt 503.8pt 549.6pt 595.4pt 641.2pt 687.0pt 732.8pt">package 
example.counter.context.service;</P>
<P class=msonormal 
style="tab-stops: 45.8pt 91.6pt 137.4pt 183.2pt 229.0pt 274.8pt 320.6pt 366.4pt 412.2pt 458.0pt 503.8pt 549.6pt 595.4pt 641.2pt 687.0pt 732.8pt">&nbsp;</P>
<P class=msonormal 
style="tab-stops: 45.8pt 91.6pt 137.4pt 183.2pt 229.0pt 274.8pt 320.6pt 366.4pt 412.2pt 458.0pt 503.8pt 549.6pt 595.4pt 641.2pt 687.0pt 732.8pt">import 
java.rmi.RemoteException;</P>
<P class=msonormal 
style="tab-stops: 45.8pt 91.6pt 137.4pt 183.2pt 229.0pt 274.8pt 320.6pt 366.4pt 412.2pt 458.0pt 503.8pt 549.6pt 595.4pt 641.2pt 687.0pt 732.8pt">&nbsp;</P>
<P class=msonormal 
style="tab-stops: 45.8pt 91.6pt 137.4pt 183.2pt 229.0pt 274.8pt 320.6pt 366.4pt 412.2pt 458.0pt 503.8pt 549.6pt 595.4pt 641.2pt 687.0pt 732.8pt">/**</P>
<P class=msonormal 
style="tab-stops: 45.8pt 91.6pt 137.4pt 183.2pt 229.0pt 274.8pt 320.6pt 366.4pt 412.2pt 458.0pt 503.8pt 549.6pt 595.4pt 641.2pt 687.0pt 732.8pt">&nbsp;* 
TODO:I am the service side implementation class. IMPLEMENT AND DOCUMENT ME</P>
<P class=msonormal 
style="tab-stops: 45.8pt 91.6pt 137.4pt 183.2pt 229.0pt 274.8pt 320.6pt 366.4pt 412.2pt 458.0pt 503.8pt 549.6pt 595.4pt 641.2pt 687.0pt 732.8pt">&nbsp;*</P>
<P class=msonormal 
style="tab-stops: 45.8pt 91.6pt 137.4pt 183.2pt 229.0pt 274.8pt 320.6pt 366.4pt 412.2pt 458.0pt 503.8pt 549.6pt 595.4pt 641.2pt 687.0pt 732.8pt">&nbsp;* 
@created by Introduce Toolkit version 1.1</P>
<P class=msonormal 
style="tab-stops: 45.8pt 91.6pt 137.4pt 183.2pt 229.0pt 274.8pt 320.6pt 366.4pt 412.2pt 458.0pt 503.8pt 549.6pt 595.4pt 641.2pt 687.0pt 732.8pt">&nbsp;*/</P>
<P class=msonormal 
style="tab-stops: 45.8pt 91.6pt 137.4pt 183.2pt 229.0pt 274.8pt 320.6pt 366.4pt 412.2pt 458.0pt 503.8pt 549.6pt 595.4pt 641.2pt 687.0pt 732.8pt">public 
class CounterContextImpl extends CounterContextImplBase {</P>
<P class=msonormal 
style="tab-stops: 45.8pt 91.6pt 137.4pt 183.2pt 229.0pt 274.8pt 320.6pt 366.4pt 412.2pt 458.0pt 503.8pt 549.6pt 595.4pt 641.2pt 687.0pt 732.8pt">&nbsp;</P>
<P class=msonormal 
style="tab-stops: 45.8pt 91.6pt 137.4pt 183.2pt 229.0pt 274.8pt 320.6pt 366.4pt 412.2pt 458.0pt 503.8pt 549.6pt 595.4pt 641.2pt 687.0pt 732.8pt">&nbsp;&nbsp;&nbsp; 
public CounterContextImpl() throws RemoteException {</P>
<P class=msonormal 
style="tab-stops: 45.8pt 91.6pt 137.4pt 183.2pt 229.0pt 274.8pt 320.6pt 366.4pt 412.2pt 458.0pt 503.8pt 549.6pt 595.4pt 641.2pt 687.0pt 732.8pt">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
super();</P>
<P class=msonormal 
style="tab-stops: 45.8pt 91.6pt 137.4pt 183.2pt 229.0pt 274.8pt 320.6pt 366.4pt 412.2pt 458.0pt 503.8pt 549.6pt 595.4pt 641.2pt 687.0pt 732.8pt">&nbsp;&nbsp;&nbsp; 
}</P>
<P class=msonormal 
style="tab-stops: 45.8pt 91.6pt 137.4pt 183.2pt 229.0pt 274.8pt 320.6pt 366.4pt 412.2pt 458.0pt 503.8pt 549.6pt 595.4pt 641.2pt 687.0pt 732.8pt">&nbsp;</P>
<P class=msonormal 
style="tab-stops: 45.8pt 91.6pt 137.4pt 183.2pt 229.0pt 274.8pt 320.6pt 366.4pt 412.2pt 458.0pt 503.8pt 549.6pt 595.4pt 641.2pt 687.0pt 732.8pt">&nbsp;&nbsp;&nbsp; 
public void incrementCounter() throws RemoteException {</P>
<P class=msonormal 
style="tab-stops: 45.8pt 91.6pt 137.4pt 183.2pt 229.0pt 274.8pt 320.6pt 366.4pt 412.2pt 458.0pt 503.8pt 549.6pt 595.4pt 641.2pt 687.0pt 732.8pt">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
int currentCounter;</P>
<P class=msonormal 
style="tab-stops: 45.8pt 91.6pt 137.4pt 183.2pt 229.0pt 274.8pt 320.6pt 366.4pt 412.2pt 458.0pt 503.8pt 549.6pt 595.4pt 641.2pt 687.0pt 732.8pt">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
try {</P>
<P class=msonormal 
style="tab-stops: 45.8pt 91.6pt 137.4pt 183.2pt 229.0pt 274.8pt 320.6pt 366.4pt 412.2pt 458.0pt 503.8pt 549.6pt 595.4pt 641.2pt 687.0pt 732.8pt">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
currentCounter = getResourceHome().getAddressedResource().getIntValue();</P>
<P class=msonormal 
style="tab-stops: 45.8pt 91.6pt 137.4pt 183.2pt 229.0pt 274.8pt 320.6pt 366.4pt 412.2pt 458.0pt 503.8pt 549.6pt 595.4pt 641.2pt 687.0pt 732.8pt">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
currentCounter++;</P>
<P class=msonormal 
style="tab-stops: 45.8pt 91.6pt 137.4pt 183.2pt 229.0pt 274.8pt 320.6pt 366.4pt 412.2pt 458.0pt 503.8pt 549.6pt 595.4pt 641.2pt 687.0pt 732.8pt">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
getResourceHome().getAddressedResource().setIntValue(currentCounter);</P>
<P class=msonormal 
style="tab-stops: 45.8pt 91.6pt 137.4pt 183.2pt 229.0pt 274.8pt 320.6pt 366.4pt 412.2pt 458.0pt 503.8pt 549.6pt 595.4pt 641.2pt 687.0pt 732.8pt">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
} catch (Exception e) \{</P>
<P class=msonormal 
style="tab-stops: 45.8pt 91.6pt 137.4pt 183.2pt 229.0pt 274.8pt 320.6pt 366.4pt 412.2pt 458.0pt 503.8pt 549.6pt 595.4pt 641.2pt 687.0pt 732.8pt">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
e.printStackTrace();</P>
<P class=msonormal 
style="tab-stops: 45.8pt 91.6pt 137.4pt 183.2pt 229.0pt 274.8pt 320.6pt 366.4pt 412.2pt 458.0pt 503.8pt 549.6pt 595.4pt 641.2pt 687.0pt 732.8pt">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
}</P>
<P class=msonormal 
style="tab-stops: 45.8pt 91.6pt 137.4pt 183.2pt 229.0pt 274.8pt 320.6pt 366.4pt 412.2pt 458.0pt 503.8pt 549.6pt 595.4pt 641.2pt 687.0pt 732.8pt">&nbsp;&nbsp;&nbsp; 
}</P>
<P class=msonormal 
style="tab-stops: 45.8pt 91.6pt 137.4pt 183.2pt 229.0pt 274.8pt 320.6pt 366.4pt 412.2pt 458.0pt 503.8pt 549.6pt 595.4pt 641.2pt 687.0pt 732.8pt">}</P>
<P class=msonormal>In Introduce 1.3, the "incrementCounter()" operation shown 
above is implemented in the service context implementation class 
(CounterContextImpl). The context operations implemented in this class are 
called each time a context client calls an operation. If the service context you 
are writing (as in the counter case above) maintains state for each context 
instance between calls, then that state can be accessed via the 
"getResourceHome().getAddressedResource()" call shown above. This call returns 
the specific instance of a CounterContextResource class that holds the state for 
the context client. In summary, the CounterContextImpl class is a stateless 
class that simply implements the context operations. The CounterContextImpl 
class uses the CounterContextResource instance specific to the EPR used by the 
client to access and maintain state for the client who is currently calling the 
context operation. In the above example, the state in the CounterContextResource 
is the current count retrieved in the impl via the "getIntValue" method (which 
is a service context property added via Introduce GDE).</P></DIV></BODY></HTML>
