<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<HTML><HEAD><TITLE>Creating or Modifying an Method</TITLE>
<META http-equiv=Content-Type content="text/html; charset=Windows-1252"><LINK 
href="Theme/lf.css" type=text/css rel=stylesheet><LINK 
href="LinksExt/C1H_HTML.css" type=text/css rel=stylesheet>
<META content="MSHTML 6.00.6001.18203" name=GENERATOR></HEAD>
<BODY 
style="PADDING-RIGHT: 0px; PADDING-LEFT: 10px; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; BACKGROUND-COLOR: transparent" 
relPart="">
<DIV class=d2h_secondary_topic 
style="PADDING-RIGHT: 0pt; PADDING-LEFT: 0pt; PADDING-BOTTOM: 10pt; MARGIN: 0pt; PADDING-TOP: 0pt">
<H5><A name=DevelopersGuide-CreatingorModifyinganMet></A>Creating or Modifying 
an Method</H5>
<DIV style="MARGIN-TOP: 0pt; MARGIN-BOTTOM: 0pt" align=center>
<TABLE class=msonormaltable cellPadding=0 border=0>
  <TBODY>
  <TR>
    <TD 
    style="PADDING-RIGHT: 0.75pt; PADDING-LEFT: 0.75pt; PADDING-BOTTOM: 0.75pt; PADDING-TOP: 0.75pt">
      <P class=msonormal style="MARGIN-TOP: 0pt"><A 
      href="https://wiki.cagrid.org/download/attachments/2917693/createMethodScreen.png?version=1"><IMG 
      title="" height=445 
      alt=https://wiki.cagrid.org/download/attachments/2917693/createMethodScreen.png 
      src="ImagesExt/image20_10.jpg" width=572 align=left border=0 
      v:shapes="Picture_x0020_8"></A><A 
      href="https://wiki.cagrid.org/download/attachments/2917693/createMethodScreen.png?version=1"><SUP><FONT 
      style="COLOR: blue; TEXT-DECORATION: none; text-underline: none"><IMG 
      alt=https://wiki.cagrid.org/images/icons/link_attachment_7.gif 
      src="ImagesExt/image20_2.png" border=0></FONT></SUP></A></P></TD></TR>
  <TR>
    <TD 
    style="PADDING-RIGHT: 0.75pt; PADDING-LEFT: 0.75pt; PADDING-BOTTOM: 0.75pt; PADDING-TOP: 0.75pt">
      <P class=msonormal style="MARGIN-BOTTOM: 0pt; TEXT-ALIGN: center" 
      align=center><B>Introduce GDE Method Modification 
  Component</B></P></TD></TR></TBODY></TABLE></DIV>
<P class=msonormal>Each operation needs to have unique name. All new methods 
will be defaults the a name called "newMethod". This should be changed to the 
desired operation name and also a description, if desired, can be added to this 
operation. For each operation, the developer needs to set the input parameters, 
return type, and any fault types that can be thrown from each service method. 
The tabs within the <B>Modify Method</B> panel will allow you to set the Input, 
Output, Faults, and Security settings of the operation.</P>
<P class=msonormal 
style="MARGIN-LEFT: 36pt; TEXT-INDENT: -18pt; tab-stops: 36.0pt">•&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
<B>Input</B><BR>To set the input parameters of the operation first select the 
<B>Input</B> tab of the <B>Method Modification</B> panel. This will display a 
table of the input parameters for this method. The input data types can be 
selected from the types tree on the left. This tree represents the available 
data types which can be used by this service. To add a data type to the input 
parameters simply select the data type from the tree on the left by clicking it. 
Then either double click the item to add it to the input parameters table or use 
the Add button. If any input parameter is to be used as an array the array 
checkbox must be checked in the table on the right once the data type has been 
added to the table. Also, once an input parameter is added the name of the 
parameter is defaulted. This name can be edited by the developer by selected the 
cell in the name column and editing the text. </P>
<P class=msonormal 
style="MARGIN-LEFT: 36pt; TEXT-INDENT: -18pt; tab-stops: 36.0pt">•&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
<B>Output</B><BR>To set the return type of the operation first select the 
<B>Output</B> tab of the <B>Method Modification</B> panel. This will display the 
return type or this method. The output data types can be selected from the types 
tree on the left. This tree represents the available data types which can be 
used by this service. To set the return type simply select the data type from 
the tree on the left by double clicking it. If you would like to reset the 
operation back to have no return type, the default, you can click the "Clear 
Output Type" button. If any output type to be used as an array the array 
checkbox must be checked in the table on the right once the data type has been 
added to the table. </P>
<P class=msonormal 
style="MARGIN-LEFT: 36pt; TEXT-INDENT: -18pt; tab-stops: 36.0pt">•&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
<B>Faults</B> There are three ways to add faults, either choose a type from the 
types tree on the left which extends WSRF BaseFaultType and click the <B>Add 
From Type</B> button, select from a fault that already exists in the service 
that is being used somewhere else and reuse it from the <B>Used Faults</B> drop 
down and then click the <B>Add Used Fault</B> button, or create a new fault 
which will tell Introduce to create you a new fault type which extends the 
BaseFaultType by typing in the fault name in the <B>Fault Type Name</B> text box 
and then click the <B>Add New Fault</B> button. Adding faults enables you to 
throw back failure information back to the client that they can plan for. This 
enables your operations to be more user friendly with respect to known errors 
that you service operation might run into. </P>
<P class=msonormal 
style="MARGIN-LEFT: 36pt; TEXT-INDENT: -18pt; tab-stops: 36.0pt">•&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
<B>Security</B><BR>Clicking on the <B>Security</B> tab of the <B>Method 
Modification</B> panel enables the service developer to configure security 
settings for the particular operation. An individual operation can require a 
different level of authentication and authorization than other methods enabling 
the mixing of public and private methods within a published service. Introduce 
leverages the Globus GSI framework for Authentication and encryption and the 
Globus PDP framework as well as a custom Configurable Introduce PDP for 
authorization. </P>
<P class=msonormal 
style="MARGIN-LEFT: 72pt; TEXT-INDENT: -18pt; tab-stops: 72.0pt">o&nbsp; 
<B>Authentication</B><BR>Introduce exposes the functionality of Globus GSI 
through a set of panels which enable the user to customize security for the 
entire service or specific methods on an service context. The user can choose 
any of the GSI configuration scenarios such as Transport Level Security with 
Integrity and Secure Communication with Privacy. For detailed knowledge of what 
the configuration options for Secure Conversation or Secure Credentials are 
please refer to documentation for the <A 
href="http://www.globus.org/toolkit/docs/4.0/security/"><FONT 
style="COLOR: blue">GSI</FONT><FONT 
style="COLOR: windowtext; TEXT-DECORATION: none; text-underline: none"><SUP><FONT 
style="COLOR: blue"><IMG alt=https://wiki.cagrid.org/images/icons/linkext7.gif 
src="ImagesExt/image20_3.png" border=0></FONT></SUP></FONT></A> framework. </P>
<P class=msonormal 
style="MARGIN-LEFT: 72pt; TEXT-INDENT: -18pt; tab-stops: 72.0pt">o&nbsp; 
<B>Authorization</B><BR>Introduce also enables configuring a particular service, 
operation, or resource, for authorization. <A title=Extensions 
href="https://wiki.cagrid.org/display/introduce13/Extensions"><FONT 
style="COLOR: blue">Authorization Extensions</FONT></A> can be installed into 
introduce to enable graphical configuration of service or method level 
authorization. Graphical panels will enable the user to describe an 
authorization policy which must be met in order to give access to the particular 
service or operation. </P>
<H6><A name=DevelopersGuide-UsingaPreExistingOperati></A><A 
name=DevelopersGuide-%7B%7DUsingaPreExistingO></A>Using a Pre-Existing Operation 
Implementation</H6>
<P class=msonormal>The implementation of a described operation may already exist 
in another class which is provided by a jar file. You can tell Introduce not to 
stub this methods server side implementation but instead call a provided method 
implementation directly in the class provided. In order to use this 
functionality the <B>Provided</B> checkbox must be selected and the class name 
attribute must be filled out in the <B>Provider</B> tab. The class name 
attribute will point to the fully qualified class name of the class which 
implements this WSDL described operation. The jar file that contains the 
provided Class which implements this operation must also me copied into the lib 
directory of the service. This will ensure that the operation will be located at 
the time the operation is called on the service. For more information on this 
particular topic refer to the Globus Documentation on Operation Providers.</P>
<H6><A name=DevelopersGuide-ImportingOperations></A>Importing Operations</H6>
<P class=msonormal>Operations can also be imported from other services. 
Importing an operation enables the service to implement the exact same operation 
signature as described in the other service. This enables the service to have an 
operation which has the exact same WSDL signature of the operation which is 
being imported. This would enable either client to invoke this operation on 
either service. Importing can be done in two ways: (1) from an Introduce 
generated service, or (2) from a WSDL file. For case 1, importing from an 
Introduce service, the developer would browse and select the Introduce generated 
service which contains the operation to be imported. Once the Introduce service 
is selected a list of services which contain this method will be available to 
select from. Select the service from which you want to import the operation. The 
methods signature will be imported and the developer will be prompted to make 
sure to copy over the WSDL and XSD files needed to import the method into the 
<I>schema/&lt;service name&gt;</I> directory of the service. For case 2, if a 
method is described in another WSDL but the developer wants to implement this 
exact method from this WSDL. The developer must have the WSDL and corresponding 
XSD's in the <I>schema/&lt;service name&gt;</I> directory of the service. Then 
the developer will be able to browse those WSDL files and select the port type 
they wish to import the operation from. The importing of a method across 
services will assure not only that each service has completely protocol 
compatible methods but also that each service's method can be invoked by the 
same base client. This enables the notion of basic inheritance in grid services 
and is discussed further in the Introduce technical 
guide.</P></DIV></BODY></HTML>
